# --- Caching strategy:
# We're using very conservative time values until we're sure this all works
# well. (A cache that sticks around too long is really annoying).
# 1) images: cache them in the browser. The URL is immutable (it contains a
# hash of the image) so we can use a fairly long period. Still better not to
# use an indefinite expiration just in case something does change, e.g. the
# hashing function).
# 2) API requests (only GET): cache them shortly in the browser (on the order
# of hours) and longer in nginx (on the order of days). Why not only in the
# browser? Because we want to be able to invalidate the cache when the content
# is updated. We can't clear the browser cache but we clear nginx's cache by
# deleting the files in the cache directory. You can also clear cache entries
# in a more fine-tuned way but this is ok for fb.
#
# Since the GET requests need to be authorized (by checking if the user is
# logged in and has privileges), we include $upstream_cookie_jwt (the value of
# the 'jwt' cookie) in the cache key. This makes it a per-user cache instead of
# a real shared cache, which would have been preferable, but we can't get
# around it. Note that this also means that a user who has just logged off or
# been deactivated can continue to access the cached content (via curl for
# example) until the cache expires.
#
# Nginx doesn't cache responses with the Set-Cookie header (in our case,
# /login), which is fine. And it only caches if the origin server sets
# 'expires' or 'max-age' in 'Cache-control'. So we have express set
# Cache-control to max-age x days, which serves as an instruction to nginx.
# Then we rewrite the Cache-control header to max-age y hours, which serves as
# an instruction to the browser.

proxy_cache_path
    /var/fb/nginx-cache/dev
    # --- 2 folder levels
    levels=1:2
    # --- keys are cached in memory (10MB), values on disk (1G)
    keys_zone=the_cache:10m
    max_size=1g
    # --- key gets cleared (only) when it hasn't been accessed for this
    # long (also applies to expired keys)
    inactive=60m
    # --- performance
    use_temp_path=off;
proxy_cache_key $scheme$proxy_host$request_uri$upstream_cookie_jwt;

server {
    listen 8080;
    server_name 127.0.0.1;

    # rewrite_log on;
    # error_log /var/log/nginx/error.log notice;

    # --- maintenance mode
    # root /var/www/fb;

    location /api {
        # ------ For the nginx cache:
        proxy_cache the_cache;
        proxy_cache_methods GET;
        # --- add useful info to header (HIT/MISS/BYPASS/...)
        add_header X-Nginx-Proxy-Cache $upstream_cache_status;
        # --- overwrite Cache-control (remove then add), as an instruction to
        # the browser
        proxy_hide_header Cache-control;
        add_header Cache-control max-age=3600;

        proxy_pass http://localhost:4444;
        rewrite ^/api/(.*)$     /$1                                     break;
    }

    # --- The `expires` directive sets Cache-control: max-age, which will be
    # processed by the browser.

    location ~* \.(jpg|jpeg|svg|png|gif|woff2|ico)$ {
        expires 2d;
        proxy_pass http://127.0.0.1:7070;
    }

    # --- only for non-dev environments, so that we're sure that .js files have
    # the content hash in the URL.
    # location ~* \.js$ {
    #     expires 2d;
    #     proxy_pass http://127.0.0.1:7070;
    #  }

    location / {
        proxy_pass http://127.0.0.1:7070;
	    # try_files /index-maintenance.html;
    }
}
